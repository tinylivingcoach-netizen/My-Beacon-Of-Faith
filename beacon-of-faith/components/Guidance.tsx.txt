import React, { useState } from 'react';
import { getGuidance } from '../Services/geminiService';

const LoadingSpinner: React.FC = () => (
    <div className="flex items-center space-x-3">
        <div className="w-6 h-6 rounded-full bg-burgundy animate-pulseLight"></div>
        <span className="text-lg font-semibold text-slate dark:text-foam">Seeking guidance...</span>
    </div>
);

const GuidanceIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
      <path strokeLinecap="round" strokeLinejoin="round" d="M12 18a.75.75 0 0 0 .75-.75V11.25a.75.75 0 0 0-1.5 0v6a.75.75 0 0 0 .75.75Z" />
      <path strokeLinecap="round" strokeLinejoin="round" d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z" />
      <path strokeLinecap="round" strokeLinejoin="round" d="M12 21a8.25 8.25 0 1 0 0-16.5 8.25 8.25 0 0 0 0 16.5Z" />
    </svg>
);

const CopyIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M15.666 3.888A2.25 2.25 0 0 0 13.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v3.045A2.25 2.25 0 0 1 13.5 9.75h-3A2.25 2.25 0 0 1 8.25 7.5V5.454c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 0 1-2.25 2.25H6.75A2.25 2.25 0 0 1 4.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 0 1 1.927-.184" />
    </svg>
);

const ShareIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.195.025.39.05.588.08a2.25 2.25 0 0 1 2.828 2.828.06.06 0 0 0 .1.033m-3.218-2.934a2.25 2.25 0 0 0 2.828 2.828M3 12a9 9 0 1 1 18 0 9 9 0 0 1-18 0Z" />
    </svg>
);

const FormattedResponse: React.FC<{ text: string }> = ({ text }) => {
  const parts = text.split(/(\*\*.*?\*\*)/g);

  return (
    <div className="text-left whitespace-pre-wrap text-sea-dark dark:text-foam">
      {parts.map((part, index) => {
        if (part.startsWith('**') && part.endsWith('**')) {
          return <strong key={index}>{part.slice(2, -2)}</strong>;
        }
        return <React.Fragment key={index}>{part}</React.Fragment>;
      })}
    </div>
  );
};


export const Guidance: React.FC = () => {
  const [question, setQuestion] = useState<string>('');
  const [result, setResult] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [copied, setCopied] = useState(false);
  const canShare = typeof navigator !== 'undefined' && navigator.share !== undefined;

  const handleCopy = () => {
    navigator.clipboard.writeText(result);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const handleShare = async () => {
    if (canShare) {
      try {
        await navigator.share({
          title: 'Guidance from Beacon of Faith',
          text: result,
        });
      } catch (error) {
        console.error("Sharing failed:", error);
      }
    }
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const trimmedQuestion = question.trim();
    if (!trimmedQuestion) {
        setError('Please ask a question.');
        return;
    }
    setIsLoading(true);
    setError('');
    setResult('');
    try {
        const response = await getGuidance(trimmedQuestion);
        setResult(response);
    } catch (err) {
        setError('An unexpected error occurred. Please try again.');
    } finally {
        setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col items-center w-full max-w-2xl mx-auto text-center">
      <div className="flex justify-center items-center gap-3 mb-2">
        <h2 className="text-3xl md:text-4xl font-bold text-sea-dark dark:text-foam">Intentional Living Q&A</h2>
        <GuidanceIcon className="w-8 h-8 text-burgundy" />
      </div>
      <p className="mb-8 text-slate dark:text-slate">Ask about life's challenges and receive wise, faith-based counsel.</p>

      <form onSubmit={handleFormSubmit} className="w-full mb-4">
        <textarea
          value={question}
          onChange={(e) => {
            setQuestion(e.target.value);
            if (error) setError('');
          }}
          placeholder="e.g., How do I find my purpose when I feel so lost?"
          className="w-full h-32 p-4 rounded-lg bg-gray-100 dark:bg-sea-mid border-2 border-transparent dark:border-white/50 focus:outline-none focus:ring-2 focus:ring-burgundy focus:border-transparent transition-all duration-300 text-sea-dark dark:text-foam placeholder-gray-500"
          disabled={isLoading}
        />
        {error && <p className="text-red-400 mt-2 text-sm">{error}</p>}
        
        <button
          type="submit"
          disabled={isLoading || !question.trim()}
          className="mt-4 w-full md:w-auto px-8 py-3 font-bold text-lg rounded-lg bg-sea-light text-sand hover:bg-opacity-90 dark:bg-burgundy dark:text-sand dark:hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-sand dark:focus:ring-offset-sea-dark focus:ring-burgundy dark:border dark:border-white/80"
        >
          {isLoading ? 'Thinking...' : 'Ask for Guidance'}
        </button>
      </form>

      <div className="w-full p-6 bg-gray-100 dark:bg-sea-mid border border-gray-200 dark:border-white/40 rounded-lg min-h-[10rem] flex items-center justify-center shadow-inner">
        {isLoading ? (
          <LoadingSpinner />
        ) : result ? (
          <div className="w-full space-y-4">
            <FormattedResponse text={result} />
            <div className="flex flex-wrap gap-2 pt-4 border-t border-gray-200 dark:border-sea-light/30">
                {canShare && (
                <button
                    onClick={handleShare}
                    className="flex items-center space-x-2 px-3 py-1 text-sm rounded-md bg-gray-200 dark:bg-sea-light/70 hover:bg-gray-300 dark:hover:bg-sea-light text-gray-700 dark:text-foam focus:outline-none focus:ring-2 focus:ring-burgundy"
                    aria-label="Share Guidance"
                >
                    <ShareIcon className="w-4 h-4" />
                    <span>Share</span>
                </button>
                )}
                <button
                onClick={handleCopy}
                className="flex items-center space-x-2 px-3 py-1 text-sm rounded-md bg-gray-200 dark:bg-sea-light/70 hover:bg-gray-300 dark:hover:bg-sea-light text-gray-700 dark:text-foam focus:outline-none focus:ring-2 focus:ring-burgundy"
                aria-label="Copy Guidance"
                >
                <CopyIcon className="w-4 h-4" />
                <span>{copied ? 'Copied!' : 'Copy'}</span>
                </button>
            </div>
          </div>
        ) : (
          <p className="text-gray-500">Your guidance will appear here.</p>
        )}
      </div>
    </div>
  );
};