import React, { useState, useRef, useEffect } from 'react';
import { findScripture } from '../Services/geminiService';
import { useLocalStorage } from '../Hooks/useLocalStorage';

const dailyVerses = [
    { ref: "Proverbs 3:5-6", text: "Trust in the LORD with all your heart and lean not on your own understanding; in all your ways submit to him, and he will make your paths straight." },
    { ref: "Philippians 4:13", text: "I can do all this through him who gives me strength." },
    { ref: "John 16:33", text: "I have told you these things, so that in me you may have peace. In this world you will have trouble. But take heart! I have overcome the world." },
    { ref: "Romans 8:28", text: "And we know that in all things God works for the good of those who love him, who have been called according to his purpose." },
    { ref: "Isaiah 41:10", text: "So do not fear, for I am with you; do not be dismayed, for I am your God. I will strengthen you and help you; I will uphold you with my righteous right hand." },
    { ref: "Psalm 46:1", text: "God is our refuge and strength, an ever-present help in trouble." },
    { ref: "1 Peter 5:7", text: "Cast all your anxiety on him because he cares for you." },
    { ref: "Jeremiah 29:11", text: "For I know the plans I have for you, declares the LORD, plans to prosper you and not to harm you, plans to give you hope and a a future." },
    { ref: "Joshua 1:9", text: "Have I not commanded you? Be strong and courageous. Do not be afraid; do not be discouraged, for the LORD your God will be with you wherever you go." },
    { ref: "Psalm 23:4", text: "Even though I walk through the darkest valley, I will fear no evil, for you are with me; your rod and your staff, they comfort me." },
    { ref: "Matthew 11:28-30", text: "Come to me, all you who are weary and burdened, and I will give you rest. Take my yoke upon you and learn from me, for I am gentle and humble in heart, and you will find rest for your souls. For my yoke is easy and my burden is light." },
    { ref: "2 Corinthians 12:9", text: "But he said to me, 'My grace is sufficient for you, for my power is made perfect in weakness.' Therefore I will boast all the more gladly about my weaknesses, so that Christ’s power may rest on me." },
    { ref: "Hebrews 11:1", text: "Now faith is confidence in what we hope for and assurance about what we do not see." },
    { ref: "Romans 15:13", text: "May the God of hope fill you with all joy and peace as you trust in him, so that you may overflow with hope by the power of the Holy Spirit." },
    { ref: "Psalm 27:1", text: "The LORD is my light and my salvation—whom shall I fear? The LORD is the stronghold of my life—of whom shall I be afraid?" },
    { ref: "Galatians 5:22-23", text: "But the fruit of the Spirit is love, joy, peace, forbearance, kindness, goodness, faithfulness, gentleness and self-control. Against such things there is no law." },
];

const getVerseOfTheDay = () => {
    const dayOfYear = Math.floor((Date.now() - new Date(new Date().getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));
    return dailyVerses[dayOfYear % dailyVerses.length];
};

const VerseOfTheDay: React.FC = () => {
    const verse = getVerseOfTheDay();
    return (
        <div className="w-full mb-8 p-4 bg-gray-50 dark:bg-sea-mid/50 border-l-4 border-burgundy rounded-r-lg shadow-sm">
            <h3 className="font-bold text-sm text-sea-dark dark:text-foam mb-1">Verse of the Day</h3>
            <p className="italic text-slate dark:text-slate">"{verse.text}"</p>
            <p className="text-right font-semibold text-sm text-burgundy mt-2">- {verse.ref}</p>
        </div>
    );
};

const LoadingSpinner: React.FC = () => (
    <div className="flex items-center space-x-3">
        <div className="w-6 h-6 rounded-full bg-burgundy animate-pulseLight"></div>
        <span className="text-lg font-semibold text-slate dark:text-foam">Seeking wisdom...</span>
    </div>
);

const JournalIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
      <path strokeLinecap="round" strokeLinejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
    </svg>
);

const CopyIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M15.666 3.888A2.25 2.25 0 0 0 13.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v3.045A2.25 2.25 0 0 1 13.5 9.75h-3A2.25 2.25 0 0 1 8.25 7.5V5.454c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 0 1-2.25 2.25H6.75A2.25 2.25 0 0 1 4.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 0 1 1.927-.184" />
    </svg>
);

const ShareIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M7.217 10.907a2.25 2.25 0 1 0 0 2.186m0-2.186c.195.025.39.05.588.08a2.25 2.25 0 0 1 2.828 2.828.06.06 0 0 0 .1.033m-3.218-2.934a2.25 2.25 0 0 0 2.828 2.828M3 12a9 9 0 1 1 18 0 9 9 0 0 1-18 0Z" />
    </svg>
);


const AnchorIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className={className}>
        <path d="M12 2a4 4 0 00-4 4c0 1.5.83 2.8 2 3.46V17h-2v2c0 1.1.9 2 2 2h4c1.1 0 2-.9 2-2v-2h-2v-7.54c1.17-.65 2-1.95 2-3.46a4 4 0 00-4-4zm0 2a2 2 0 110 4 2 2 0 010-4z"/>
        <path d="M4 13h16v2H4z" opacity="0.6"/>
    </svg>
);


const ScriptureResult: React.FC<{ result: string; onJournal: (result: string) => void; }> = ({ result, onJournal }) => {
    const parts = result.split('::').map(p => p.trim());
    const [copied, setCopied] = useState(false);
    const blockquoteRef = useRef<HTMLQuoteElement>(null);
    const [isScrollable, setIsScrollable] = useState(false);
    const canShare = navigator.share !== undefined;

    useEffect(() => {
        const checkScrollable = () => {
            if (blockquoteRef.current) {
                setIsScrollable(blockquoteRef.current.scrollHeight > blockquoteRef.current.clientHeight);
            }
        };
        
        checkScrollable();
        const resizeObserver = new ResizeObserver(checkScrollable);
        if (blockquoteRef.current) {
            resizeObserver.observe(blockquoteRef.current);
        }

        return () => resizeObserver.disconnect();
    }, [result]);
    
    if (parts.length !== 4) {
        return <p className="text-red-400">{result}</p>;
    }
    
    const [reference, text, explanation, context] = parts;

    const handleCopy = () => {
        navigator.clipboard.writeText(`${reference}\n\n"${text}"`);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
    };

    const handleShare = async () => {
        if (canShare) {
            try {
                await navigator.share({
                    title: `Beacon of Faith: ${reference}`,
                    text: `"${text}" - ${reference}\n\nShared from Beacon of Faith.`,
                });
            } catch (error) {
                console.error("Sharing failed:", error);
            }
        }
    };


    return (
        <div className="space-y-6 text-left w-full">
            <div className="flex justify-between items-start gap-4">
                <p className="text-xl font-bold text-burgundy">{reference}</p>
                <div className="flex-shrink-0 flex items-center space-x-2">
                    {/* Action buttons will be added here */}
                </div>
            </div>
             <div className="relative">
                <blockquote
                    ref={blockquoteRef}
                    className="max-h-40 overflow-y-auto border-l-4 border-burgundy pl-4 pr-2 italic text-lg text-sea-dark dark:text-foam"
                >
                    "{text}"
                </blockquote>
                {isScrollable && (
                    <div className="absolute bottom-0 left-0 right-0 h-8 bg-gradient-to-t from-gray-100 dark:from-sea-mid to-transparent pointer-events-none" />
                )}
            </div>
            <div>
                <h3 className="font-bold text-sea-dark dark:text-foam mb-1">Reflection</h3>
                <p className="text-md text-slate dark:text-slate">{explanation}</p>
            </div>
            <div>
                <h3 className="font-bold text-sea-dark dark:text-foam mb-1">Context</h3>
                <p className="text-sm italic text-slate/80 dark:text-slate/80">{context}</p>
            </div>
            <div className="flex flex-wrap gap-2 pt-4 border-t border-gray-200 dark:border-sea-light/30">
                <button
                    onClick={() => onJournal(result)}
                    className="flex items-center space-x-2 px-3 py-1 text-sm rounded-md bg-burgundy/10 dark:bg-burgundy/20 text-burgundy dark:text-sand hover:bg-burgundy/20 dark:hover:bg-burgundy/30 focus:outline-none focus:ring-2 focus:ring-burgundy"
                >
                    <JournalIcon className="w-4 h-4" />
                    <span>Journal this Scripture</span>
                </button>
                 {canShare && (
                    <button
                        onClick={handleShare}
                        className="flex items-center space-x-2 px-3 py-1 text-sm rounded-md bg-gray-200 dark:bg-sea-light/70 hover:bg-gray-300 dark:hover:bg-sea-light text-gray-700 dark:text-foam focus:outline-none focus:ring-2 focus:ring-burgundy"
                        aria-label="Share Scripture"
                    >
                       <ShareIcon className="w-4 h-4" />
                       <span>Share</span>
                    </button>
                )}
                <button
                    onClick={handleCopy}
                    className="flex items-center space-x-2 px-3 py-1 text-sm rounded-md bg-gray-200 dark:bg-sea-light/70 hover:bg-gray-300 dark:hover:bg-sea-light text-gray-700 dark:text-foam focus:outline-none focus:ring-2 focus:ring-burgundy"
                    aria-label="Copy Scripture"
                >
                    <CopyIcon className="w-4 h-4" />
                    <span>{copied ? 'Copied!' : 'Copy'}</span>
                </button>
            </div>
        </div>
    );
};

const VersionSelector: React.FC<{ value: string; checked: boolean; onChange: (value: string) => void }> = ({ value, checked, onChange }) => (
    <label className="flex items-center space-x-2 cursor-pointer text-sm text-slate dark:text-foam">
        <input
            type="radio"
            name="bible-version"
            value={value}
            checked={checked}
            onChange={(e) => onChange(e.target.value)}
            className="hidden"
        />
        <span
            className={`px-4 py-2 rounded-full border-2 transition-all duration-200 ${
                checked
                    ? 'bg-burgundy border-burgundy text-sand font-bold'
                    : 'bg-transparent border-slate/50 dark:border-sea-light/50 hover:border-burgundy'
            }`}
        >
            {value}
        </span>
    </label>
);


export const ScriptureFinder: React.FC<{ onJournalScripture: (result: string) => void }> = ({ onJournalScripture }) => {
  const [feeling, setFeeling] = useState<string>('');
  const [result, setResult] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
  const [searchHistory, setSearchHistory] = useLocalStorage<string[]>('scriptureSearchHistory', []);
  const [bibleVersion, setBibleVersion] = useState<string>('NKJV');

  const performSearch = async (searchTerm: string) => {
    const trimmedSearchTerm = searchTerm.trim();
    if (!trimmedSearchTerm) {
        setError('Please tell me how you are feeling.');
        return;
    }
    setIsLoading(true);
    setError('');
    setResult('');
    try {
        const response = await findScripture(trimmedSearchTerm, bibleVersion);
        setResult(response);
        const newHistory = [trimmedSearchTerm, ...searchHistory.filter(item => item !== trimmedSearchTerm)].slice(0, 5);
        setSearchHistory(newHistory);
    } catch (err) {
        setError('An unexpected error occurred. Please try again.');
    } finally {
        setIsLoading(false);
    }
  };

  const handleFormSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    performSearch(feeling);
  };

  const handleHistoryClick = (searchTerm: string) => {
    setFeeling(searchTerm);
    performSearch(searchTerm);
  };


  return (
    <div className="flex flex-col items-center w-full max-w-2xl mx-auto text-center">
      <VerseOfTheDay />
      <div className="flex justify-center items-center gap-3 mb-2">
        <h2 className="text-3xl md:text-4xl font-bold text-sea-dark dark:text-foam">Find Your Anchor</h2>
        <AnchorIcon className="w-8 h-8 text-burgundy" />
      </div>
      <p className="mb-8 text-slate dark:text-slate">Describe what's on your heart, and let Faith guide you.</p>

      <form onSubmit={handleFormSubmit} className="w-full mb-4">
        <textarea
          value={feeling}
          onChange={(e) => {
            setFeeling(e.target.value);
            if (error) setError('');
          }}
          placeholder="I'm feeling lost and anxious about the future..."
          className="w-full h-32 p-4 rounded-lg bg-gray-100 dark:bg-sea-mid border-2 border-transparent dark:border-white/50 focus:outline-none focus:ring-2 focus:ring-burgundy focus:border-transparent transition-all duration-300 text-sea-dark dark:text-foam placeholder-gray-500"
          disabled={isLoading}
        />
        {error && <p className="text-red-400 mt-2 text-sm">{error}</p>}
        
        <div className="my-4">
            <div className="flex justify-center items-center gap-2 md:gap-4">
                <VersionSelector value="KJV" checked={bibleVersion === 'KJV'} onChange={setBibleVersion} />
                <VersionSelector value="NKJV" checked={bibleVersion === 'NKJV'} onChange={setBibleVersion} />
                <VersionSelector value="AMP" checked={bibleVersion === 'AMP'} onChange={setBibleVersion} />
            </div>
        </div>

        <button
          type="submit"
          disabled={isLoading || !feeling.trim()}
          className="w-full md:w-auto px-8 py-3 font-bold text-lg rounded-lg bg-sea-light text-sand hover:bg-opacity-90 dark:bg-burgundy dark:text-sand dark:hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-sand dark:focus:ring-offset-sea-dark focus:ring-burgundy dark:border dark:border-white/80"
        >
          {isLoading ? 'Searching...' : 'Find Scripture'}
        </button>
      </form>

      {searchHistory.length > 0 && (
        <div className="w-full mb-8 animate-fadeIn">
            <h3 className="text-sm font-semibold text-gray-500 dark:text-slate mb-3">Recent Searches</h3>
            <div className="flex flex-wrap justify-center gap-2">
                {searchHistory.map((item) => (
                    <button 
                      key={item}
                      onClick={() => handleHistoryClick(item)}
                      disabled={isLoading}
                      className="px-3 py-1 text-sm bg-gray-200 dark:bg-sea-mid/80 border border-transparent dark:border-white/30 text-gray-700 dark:text-burgundy rounded-full hover:bg-gray-300 dark:hover:bg-sea-light transition-colors duration-200 disabled:opacity-50"
                      title={item}
                    >
                        <span className="truncate max-w-[150px] inline-block">{item}</span>
                    </button>
                ))}
            </div>
        </div>
      )}

      <div className="w-full p-6 bg-gray-100 dark:bg-sea-mid border border-gray-200 dark:border-white/40 rounded-lg min-h-[10rem] flex items-center justify-center shadow-inner">
        {isLoading ? (
          <LoadingSpinner />
        ) : result ? (
          <ScriptureResult result={result} onJournal={onJournalScripture} />
        ) : (
          <p className="text-gray-500">Your guidance will appear here.</p>
        )}
      </div>
    </div>
  );
};