import React, { useState, useMemo, useEffect } from 'react';
import { useLocalStorage } from '../Hooks/useLocalStorage';
import { JournalEntry } from '../types';

const TRUNCATE_LENGTH = 250;

const journalPrompts = [
  "What are you most grateful for today?",
  "Write about a moment you felt God's presence recently.",
  "What challenge are you facing, and how can you give it to God?",
  "Describe a way you can be a light to someone else this week.",
  "What is one thing you're learning about your faith right now?",
  "Reflect on a scripture that has been on your heart.",
  "Where did you see beauty in God's creation today?",
  "What is weighing on your heart that you can release to Him in prayer?",
  "How has God shown His faithfulness in your life this past week?",
  "Write a prayer for someone who is on your heart today.",
  "What is a fear you can surrender to God? What would it look like to trust Him with it completely?",
  "Describe a time you had to forgive someone. How did it feel?",
  "What spiritual goal are you working towards right now?",
  "Reflect on a character trait you'd like to develop with God's help (e.g., patience, kindness).",
  "Who has been a spiritual mentor or encouragement to you, and why?",
  "What does it mean to you to 'love your neighbor as yourself' in a practical way?",
  "Write about a lesson you learned from a difficult season.",
  "What promise from God are you holding onto in this season of your life?",
];

const JournalEntryCard: React.FC<{
    entry: JournalEntry;
    onDelete: (id: string) => void;
    isDeleting: boolean;
}> = ({ entry, onDelete, isDeleting }) => {
    const [isExpanded, setIsExpanded] = useState(false);
    const canTruncate = entry.content.length > TRUNCATE_LENGTH;
    const displayedContent = canTruncate && !isExpanded
        ? `${entry.content.substring(0, TRUNCATE_LENGTH)}...`
        : entry.content;

    return (
        <div className={`bg-gray-100 dark:bg-sea-mid p-4 rounded-lg border border-gray-200 dark:border-white/40 relative transition-all duration-300 ${isDeleting ? 'animate-fadeOut' : 'animate-fadeIn'}`}>
            <div className="flex justify-between items-start">
                <p className="text-sm font-semibold text-burgundy mb-2">
                    {new Date(entry.date).toLocaleString()}
                </p>
                <button
                    onClick={() => onDelete(entry.id)}
                    className="text-gray-400 hover:text-red-500 transition-colors"
                    aria-label="Delete entry"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                        <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <p className="whitespace-pre-wrap text-sea-dark dark:text-foam">{displayedContent}</p>
            {canTruncate && (
                <button onClick={() => setIsExpanded(!isExpanded)} className="text-burgundy font-semibold text-sm mt-2">
                    {isExpanded ? 'Read Less' : 'Read More'}
                </button>
            )}
        </div>
    );
};


export const Journal: React.FC<{ prefilledEntry?: string; onEntryConsumed: () => void; }> = ({ prefilledEntry, onEntryConsumed }) => {
  const [entries, setEntries] = useLocalStorage<JournalEntry[]>('journalEntries', []);
  const [newEntry, setNewEntry] = useState('');
  const [deletingId, setDeletingId] = useState<string | null>(null);
  const maxChars = 2000;

  const guidedPrompt = useMemo(() => {
    const randomIndex = Math.floor(Math.random() * journalPrompts.length);
    return journalPrompts[randomIndex];
  }, []);

  useEffect(() => {
    if (prefilledEntry) {
        setNewEntry(prefilledEntry);
        onEntryConsumed(); // Clear the prefilled entry in parent state
    }
  }, [prefilledEntry, onEntryConsumed]);

  const handleAddEntry = () => {
    if (!newEntry.trim()) return;

    const entry: JournalEntry = {
      id: new Date().toISOString(),
      date: new Date().toISOString(),
      content: newEntry,
    };
    setEntries([entry, ...entries]);
    setNewEntry('');
  };

  const handleDeleteEntry = (id: string) => {
    if (window.confirm('Are you sure you want to permanently delete this entry?')) {
        setDeletingId(id);
        setTimeout(() => {
            setEntries(prevEntries => prevEntries.filter(entry => entry.id !== id));
            setDeletingId(null);
        }, 300); // Corresponds to animation duration
    }
  };
  
  const sortedEntries = useMemo(() => 
    [...entries].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()),
    [entries]
  );

  return (
    <div className="w-full max-w-3xl mx-auto">
      <h2 className="text-3xl md:text-4xl font-bold mb-2 text-center text-sea-dark dark:text-foam">Your Reflections</h2>
      <p className="mb-8 text-center text-slate dark:text-slate">A private space to chart your journey of faith.</p>
      
      <div className="mb-8">
        <div className="mb-4 p-4 bg-gray-50 dark:bg-sea-mid/50 border-l-4 border-burgundy rounded-r-lg shadow-sm text-left">
            <p className="font-bold text-sm text-sea-dark dark:text-foam mb-1">Guided Prompt</p>
            <p className="italic text-slate dark:text-slate">{guidedPrompt}</p>
        </div>
        <textarea
          value={newEntry}
          onChange={(e) => setNewEntry(e.target.value)}
          placeholder="Begin your reflection here..."
          maxLength={maxChars}
          className="w-full h-48 p-4 rounded-lg bg-gray-100 dark:bg-sea-mid border-2 border-transparent dark:border-white/50 focus:outline-none focus:ring-2 focus:ring-burgundy focus:border-transparent transition-all duration-300 text-sea-dark dark:text-foam placeholder-gray-500"
        />
        <div className="flex justify-between items-center mt-2">
          <p className={`text-sm ${newEntry.length >= maxChars ? 'text-red-500' : 'text-gray-500'}`}>
            {newEntry.length} / {maxChars}
          </p>
          <button
            onClick={handleAddEntry}
            disabled={!newEntry.trim()}
            className="px-6 py-2 font-bold text-lg rounded-lg bg-sea-light text-sand hover:bg-opacity-90 dark:bg-burgundy dark:text-sand dark:hover:opacity-90 disabled:opacity-50 transition-all duration-300 transform hover:scale-105 shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-sand dark:focus:ring-offset-sea-dark focus:ring-burgundy dark:border dark:border-white/80"
          >
            Save Entry
          </button>
        </div>
      </div>
      
      <div className="space-y-6">
        {sortedEntries.length > 0 ? (
          sortedEntries.map((entry) => (
            <JournalEntryCard 
                key={entry.id} 
                entry={entry} 
                onDelete={handleDeleteEntry}
                isDeleting={deletingId === entry.id}
            />
          ))
        ) : (
          <p className="text-center text-gray-500">Your journal is empty. Write your first entry above.</p>
        )}
      </div>
    </div>
  );
};